{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","handleSubmit","e","preventDefault","console","log","inputValue","trim","length","cats","setInputValue","useState","onSubmit","type","value","onChange","target","onClick","getGifs","category","a","URL","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","image","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"qNAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cASpBC,EAAe,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,oBAERC,EAAWC,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKH,GAAL,mBAAmBG,OACtCC,EAAc,MAKtB,EAAoCC,mBAAS,IAA7C,mBAAOL,EAAP,KAAmBI,EAAnB,KAEA,OACI,uBAAME,SAAWX,EAAjB,UACI,uBACIY,KAAK,OACLC,MAASR,EACTS,SAzBc,SAACb,GAEvBE,QAAQC,IAAIH,EAAEc,OAAOF,OAErBJ,EAAeR,EAAEc,OAAOF,UAuBpB,wBAAQG,QAAUhB,EAAlB,uBACA,2B,+BCpCCiB,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACF,mCAEXC,EAHa,0DAG6CC,UAAUH,GAHvD,sDAKKI,MAAMF,GALX,cAKbG,EALa,gBAMIA,EAAUC,OANd,uBAMXC,EANW,EAMXA,KAIFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAK1C5B,QAAQC,IAAIsB,GAnBO,kBAqBZA,GArBY,4CAAH,sDCEPQ,EAAc,SAAC,GAAwB,EAArBL,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEtC,OADA5B,QAAQC,IAAI2B,GAER,qBAAKI,UAAU,2CAAf,SAEI,qBAAKC,IAAKL,EAAKM,IAAKP,OCFnBQ,EAAW,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAGvB,ECHwB,SAAEA,GAE1B,MAA0BR,mBAAS,CAC/Be,KAAK,GACLc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA2BA,OArBAC,qBAAW,WAGPzB,EAAQC,GACHyB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAGd,UAIZ,CAACrB,IAIGsB,ED1BkBM,CAAa5B,GAA9BO,EAAR,EAAQA,KAAMc,EAAd,EAAcA,QASd,OARApC,QAAQC,IAAIqB,GACZtB,QAAQC,IAAImC,GAQR,eAAC,WAAD,WACI,6BAAKrB,IACHqB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAKIV,EAAKE,KAAK,SAAAoB,GAAK,OAGX,aAHoB,CAGnB,EAAD,eAEIA,GADEA,EAAMlB,aE1BnBmB,EAAe,WAGxB,MAAoCtC,mBAAS,CAAC,cAA9C,mBAAOuC,EAAP,KAAmBlD,EAAnB,KAMA,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,6BAMQkD,EAAWtB,KAAK,SAACT,EAAUgC,GAAX,OACZ,cAAC,EAAD,CAEAhC,SAAWA,GADJA,Y,MCpB/BiC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.66638e0a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types';  // Que el parametro que le llega al componente sea obligatorio\r\n\r\n\r\n// export const AddCategory = ( props ) => {  //Funciona igual sin destructiring\r\nexport const AddCategory = ( {setCategories} ) => { //Con destructuring el parametro que le llega desde gifexpertApp\r\n\r\n    const handleChangeInput = (e) => {\r\n\r\n        console.log(e.target.value);\r\n        //console.log(e);\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        console.log('Submit realizado');\r\n        // props.setCategories( cats => [...cats, inputValue] );  //Sin destructiring\r\n        if (inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue,...cats ]);  //Con destructorung\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    \r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>                    \r\n            <input \r\n                type=\"text\" \r\n                value= { inputValue }\r\n                onChange= { handleChangeInput }\r\n            />                \r\n            <button onClick={ handleSubmit }>Añadir</button>\r\n            <hr/>\r\n        </form>\r\n    )\r\n}\r\n\r\n//Que el parametro {setCategories} que necesita el componente AddCategoriy sea obligatorio, la llamada al componente es desde GifExpertApp\r\n// el nombre {setCategories} lo he puesto yo en, export const AddCategory = ( {setCategories} ), si en la llamada al componente no lo \r\n// ponemos nos saltara error en la consola, <AddCategory setCategories = { setCategories }/>\r\nAddCategory.propTypes  = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n ","export const getGifs = async ( category) => {\r\n    const API_KEY =  'jmhwNA5EszXBjSUWhADWrXjWp6LrRd1X'\r\n    //const URL = 'https://api.giphy.com/v1/gifs/search?limit=10&q=rick&api_key=jmhwNA5EszXBjSUWhADWrXjWp6LrRd1X'\r\n    const URL = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category)}&api_key=jmhwNA5EszXBjSUWhADWrXjWp6LrRd1X`  //EncodeURi elimina espacios y caracteres extraños\r\n\r\n    const respuesta = await fetch(URL)\r\n    const { data } = await respuesta.json();\r\n\r\n\r\n\r\n    const gifs = data.map(img => {\r\n        return { \r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n            //La interrogacion es para decir que si en images hay imagenes usa lo siguiente de la sentencia\r\n        }\r\n    })\r\n\r\n    console.log(gifs)\r\n    //setImages(gifs)\r\n    return gifs\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url} ) => {\r\n    console.log(url)\r\n    return (\r\n        <div className=\"card  animate__animated animate__bounce \">\r\n            {/* {img.title} */}\r\n            <img src={url} alt={title} />\r\n            {/* <p> {title}</p> */}\r\n        </div>\r\n    )\r\n}\r\n","import React, {  Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GiftGrid = ( {category} ) => {\r\n\r\n    // const [images, setImages] = useState([ ])\r\n    const { data, loading} = useFetchGifs(category);\r\n    console.log(data);\r\n    console.log(loading);\r\n\r\n\r\n    \r\n\r\n    //setImages(getGifs(category));\r\n    //getGifs();\r\n    return (\r\n        <Fragment>\r\n            <h3>{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                \r\n    \r\n                {\r\n                //images.map( ({ id, title })  => (  //Con destructuring\r\n                data.map( image   => (  //Sin destructutirig\r\n\r\n                    // <li key={ id }> { title }</li>\r\n                    <GifGridItem\r\n                    key={ image.id }\r\n                    {...image} \r\n                    />\r\n                ))\r\n                }\r\n\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n    \r\n    //Este useEfet solo se ejecutara la primera vez porque el array lo dejo vacio, mas tarde le meto argumento por la dependerncia\r\n    useEffect( () => {\r\n        // getGifs(category)\r\n        //     .then( imgs => setImages(imgs))\r\n        getGifs(category)\r\n            .then( imgs =>{\r\n\r\n                setTimeout(() => {\r\n\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    }) \r\n                    \r\n                }, 1000);\r\n\r\n\r\n            })\r\n    }, [category] )\r\n\r\n\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GiftGrid } from './components/GiftGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch','Smaurai X', 'Dragon Ball']\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = () =>{\r\n        // setCategories( [ 'ExpedienteX',...categories]);\r\n        //setCategories( cats => ['Expedientex',...cats] );  //Es igual que la de arriba, cats es el array con el valor actual y le devolvemos el valor nuevo, usamos el callback esta vez que recibe por parametro\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>            \r\n            <hr/>\r\n            <AddCategory setCategories = { setCategories }/>\r\n\r\n            <ol>\r\n               { \r\n                    // categories.map( (category, i) => {\r\n                    //      return  <li key={ category }> { category} </li>;                          \r\n                    // })\r\n\r\n                    categories.map( (category, i) => (\r\n                        <GiftGrid \r\n                        key= { category}\r\n                        category={ category}\r\n                         />\r\n                    ))\r\n\r\n               } \r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}